Attribute VB_Name = "modFunctions"
'
' By Homam Babi - 2008
' humam_babi@hotmail.com
'

Option Explicit
Option Base 0

Public Const D_Fixed = 8
Public Const D_CDROM = 32
Public Const D_Removable = 4
Public Const RegWinARPath As String = "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"
Public Const RegWinAREntry As String = "NoDriveTypeAutoRun"

Public Const IDS_APP_NAME = 100

Public Const IDS_REG_APP_NAME = 101
Public Const IDS_REG_SECTION_SETTINGS = 102
Public Const IDS_REG_KEY_INSTALLED = 103
Public Const IDS_REG_KEY_AUTODELETE = 104
Public Const IDS_REG_KEY_MSG_STYLE = 105

Public Const IDS_MSG_SETTINGS_CHANGED = 300
Public Const IDS_MSG_RESTART_COMPUTER = 301
Public Const IDS_MSG_COULDNT_RESTART = 400
Public Const IDS_MSG_FLASH_REPLACE = 401

Public Enum DrvType
    DRIVE_UNKNOWN = 0
    DRIVE_NO_ROOT_DIR = 1
    DRIVE_REMOVABLE = 2
    DRIVE_FIXED = 3
    DRIVE_REMOTE = 4
    DRIVE_CDROM = 5
    DRIVE_RAMDISK = 6
End Enum
Public Enum TypesOfAlert
    Clean = 1
    Found = 2
    Deleted = 4
    Still = 8
End Enum

Private Type OSVERSIONINFO
    dwOSVersionInfoSize As Long
    dwMajorVersion      As Long
    dwMinorVersion      As Long
    dwBuildNumber       As Long
    dwPlatformId        As Long
    szCSDVersion        As String * 128  '  Maintenance string for PSS usage
End Type


Public Ending               As Boolean
Public Alerting             As Boolean
Public VirusFound           As Boolean
Public VirusDeleted         As Boolean
Public VirusInFlash         As Boolean
Public DrivesList()         As String
Public DrivesType()         As DrvType

Public Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
Public Declare Function SetWindowLong Lib "user32" Alias "SetWindowLongA" (ByVal hWnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Any) As Long
Private Declare Function GetVersionEx Lib "kernel32" Alias "GetVersionExA" (lpVersionInformation As OSVERSIONINFO) As Long
Private Declare Function GetLogicalDriveStrings Lib "kernel32" Alias "GetLogicalDriveStringsA" (ByVal nBufferLength As Long, ByVal lpBuffer As String) As Long
Private Declare Function GetDriveType Lib "kernel32" Alias "GetDriveTypeA" (ByVal nDrive As String) As Long
Public Function CheckOSVersion() As Boolean
    Dim OsInfo  As OSVERSIONINFO
    Dim Ret     As Long
    
    OsInfo.dwOSVersionInfoSize = Len(OsInfo)
    
    Ret = GetVersionEx(OsInfo)
    
    If (OsInfo.dwMajorVersion <> 5) Or (OsInfo.dwMinorVersion <> 1) Then
        Load frmOSVer
        frmOSVer.vMajor = OsInfo.dwMajorVersion
        frmOSVer.vMinor = OsInfo.dwMinorVersion
        CheckOSVersion = False
        
        frmOSVer.Show
    Else
        CheckOSVersion = True
    End If
End Function
Public Sub RestartWindows()
    Err.Clear
    On Error Resume Next
    
    Shell "shutdown -r -t 0"
    
    If Err.Number <> 0 Then
        MsgBox LoadResString(IDS_MSG_COULDNT_RESTART), vbApplicationModal Or vbExclamation Or vbOKOnly, LoadResString(IDS_APP_NAME)
        Err.Clear
    End If
End Sub
Public Sub CheckLocals(ByVal ShowResults As Boolean)
    Dim Lp      As Long
    Dim strAR   As String
    Dim strVr   As String
    
    'Initialize
    VirusFound = False
    VirusDeleted = True
    VirusInFlash = False
    
    ShellTrayModify "Check"
    
    GetDrives
    
    For Lp = 0 To UBound(DrivesList)
        If DrivesType(Lp) <> DRIVE_CDROM Then
            strAR = DrivesList(Lp) & "Autorun.inf"

            If FileExists(strAR) Then
                If DrivesType(Lp) = DRIVE_REMOVABLE Then VirusInFlash = True
                strVr = GetVirusPath(strAR)
                If FileExists(strVr) Then DealWithVirus strVr

                DealWithVirus strAR
            End If
        End If
    Next Lp


    If ShowResults = True Then
        DisplayResults
    Else
        If VirusFound = True Then
            DisplayResults
        Else
            ShellTrayModify "OK"
            DoEvents
            Sleep 2000
        End If
    End If
    
    Do
        DoEvents
    Loop While Alerting
    
    ShellTrayModify "App"
End Sub
Public Sub GetDrives()
    Dim sAllDrives As String
    Dim sBuffer As String
    Dim Lp As Long
    
    sBuffer = Space$((26 * 4) + 1)
    If GetLogicalDriveStrings(Len(sBuffer), sBuffer) Then
        sAllDrives = Trim$(sBuffer)
    End If
    
    sAllDrives = Replace$(sAllDrives, Chr$(0), Chr$(32))
    DrivesList() = Split(Trim$(sAllDrives), Chr$(32))
    
    ReDim DrivesType(UBound(DrivesList))
    For Lp = LBound(DrivesList) To UBound(DrivesList)
        DrivesType(Lp) = GetDriveType(DrivesList(Lp))
    Next Lp
End Sub
Public Function FileExists(ByVal strPathName As String) As Boolean
    Dim intFileNum As Integer

    On Error Resume Next

    intFileNum = FreeFile
    Open strPathName For Input As intFileNum
        FileExists = (Err.Number = 0)
    Close intFileNum

    Err.Clear
End Function
Private Function GetVirusPath(ByVal strAutorun As String) As String
    Dim Lp As Long
    Dim DataLine As String
    
    On Local Error Resume Next
    
    Open strAutorun For Input As #1
        While Not EOF(1)
            Input #1, DataLine
            DataLine = Trim$(UCase$(DataLine))
            If InStr(DataLine, "OPEN") Then
                DataLine = Right$(DataLine, Len(DataLine) - InStr(DataLine, "="))
                DataLine = Trim$(DataLine)
                GetVirusPath = Left$(strAutorun, 3) & DataLine
                GoTo VirFound
            End If
            DoEvents
        Wend
VirFound:
    Close #1
    
End Function
Private Sub DealWithVirus(ByVal strFileName As String)
    VirusFound = True
                 
    If GetSetting(LoadResString(IDS_REG_APP_NAME), LoadResString(IDS_REG_SECTION_SETTINGS), LoadResString(IDS_REG_KEY_AUTODELETE), vbUnchecked) = vbChecked Then
        Delete strFileName
        If FileExists(strFileName) Then
            VirusDeleted = False
        End If
    Else
        Dim msgAlert As frmAlert
        Set msgAlert = New frmAlert
        msgAlert.DisplayMessage Found, strFileName
                
        'Now stop untill user answers the deletion question
        Do
            DoEvents
        Loop While Alerting
    End If
End Sub
Public Sub Delete(ByVal strFile As String)
    On Error Resume Next
    
    SetAttr strFile, vbArchive
    Kill strFile
End Sub
Public Sub DisplayResults()
    Dim msgAlert As frmAlert
    
    If VirusFound = False Then
        ShellTrayModify "OK"

        Set msgAlert = New frmAlert
        msgAlert.DisplayMessage Clean
    Else
        If VirusDeleted = True Then
            ShellTrayModify "OK"

            Set msgAlert = New frmAlert
            msgAlert.DisplayMessage Deleted
            If VirusInFlash = True Then
                MsgBox LoadResString(IDS_MSG_FLASH_REPLACE), vbInformation, LoadResString(IDS_APP_NAME)
            End If
        Else
            ShellTrayModify "Warn"

            Set msgAlert = New frmAlert
            msgAlert.DisplayMessage Still
        End If
    End If

    VirusFound = False
    VirusDeleted = True
    VirusInFlash = False
End Sub

