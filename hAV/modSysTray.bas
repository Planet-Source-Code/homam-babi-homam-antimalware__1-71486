Attribute VB_Name = "modSysTray"
Option Explicit

'www.vbaccelerator.com

Private Const NOTIFYICONDATA_V1_SIZE As Long = 88  'pre-5.0 structure size
Private Const NOTIFYICONDATA_V2_SIZE As Long = 488 'pre-6.0 structure size
Private Const NOTIFYICONDATA_V3_SIZE As Long = 504 '6.0+ structure size

Private Const NIM_ADD        As Long = &H0
Private Const NIM_MODIFY     As Long = &H1
Private Const NIM_DELETE     As Long = &H2
Private Const NIF_ICON       As Long = &H2  'adding an ICON
Private Const NIF_TIP        As Long = &H4  'adding a TIP
Private Const NIF_MESSAGE    As Long = &H1  'want return messages

Private Const WM_LBUTTONDOWN     As Long = &H201
Private Const WM_LBUTTONUP       As Long = &H202
Private Const WM_LBUTTONDBLCLK   As Long = &H203
Private Const WM_MBUTTONDOWN     As Long = &H207
Private Const WM_MBUTTONUP       As Long = &H208
Private Const WM_MBUTTONDBLCLK   As Long = &H209
Private Const WM_RBUTTONDOWN     As Long = &H204
Private Const WM_RBUTTONUP       As Long = &H205
Private Const WM_RBUTTONDBLCLK   As Long = &H206

Private Const GWL_WNDPROC       As Long = (-4)
Private Const GWL_HWNDPARENT    As Long = (-8)
Private Const GWL_ID            As Long = (-12)
Private Const GWL_STYLE         As Long = (-16)
Private Const GWL_EXSTYLE       As Long = (-20)
Private Const GWL_USERDATA      As Long = (-21)

Private Const WM_USER       As Long = &H400
Private Const WM_APP        As Long = &H8000&
Private Const WM_MYHOOK     As Long = WM_APP + &H15
Private Const WM_NOTIFY     As Long = &H4E
Private Const WM_COMMAND    As Long = &H111
Public Const WM_CLOSE       As Long = &H10

Private Const IMAGE_ICON = 1
Private Const LR_SHARED = &H8000&
Private Const SM_CXSMICON = 49
Private Const SM_CYSMICON = 50

Private Type GUID
   Data1    As Long
   Data2    As Integer
   Data3    As Integer
   Data4(7) As Byte
End Type

Private Type NOTIFYICONDATA
   cbSize           As Long
   hWnd             As Long
   uID              As Long
   uFlags           As Long
   uCallbackMessage As Long
   hIcon            As Long
   szTip            As String * 128
   dwState          As Long
   dwStateMask      As Long
   szInfo           As String * 256
   uTimeoutAndVersion As Long
   szInfoTitle      As String * 64
   dwInfoFlags      As Long
   guidItem         As GUID
End Type


Private defWindowProc       As Long
Private NOTIFYICONDATA_SIZE As Long
Private NID                 As NOTIFYICONDATA


Private Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (Destination As Any, Source As Any, ByVal Length As Long)
Private Declare Function VerQueryValue Lib "version.dll" Alias "VerQueryValueA" (pBlock As Any, ByVal lpSubBlock As String, lpBuffer As Any, nVerSize As Long) As Long
Private Declare Function GetFileVersionInfo Lib "version.dll" Alias "GetFileVersionInfoA" (ByVal lptstrFilename As String, ByVal dwHandle As Long, ByVal dwLen As Long, lpData As Any) As Long
Private Declare Function GetFileVersionInfoSize Lib "version.dll" Alias "GetFileVersionInfoSizeA" (ByVal lptstrFilename As String, lpdwHandle As Long) As Long
Private Declare Function LoadImageAsString Lib "user32" Alias "LoadImageA" (ByVal hInst As Long, ByVal lpsz As String, ByVal uType As Long, ByVal cxDesired As Long, ByVal cyDesired As Long, ByVal fuLoad As Long) As Long
Private Declare Function GetSystemMetrics Lib "user32" (ByVal nIndex As Long) As Long
Private Declare Function Shell_NotifyIcon Lib "shell32" Alias "Shell_NotifyIconA" (ByVal dwMessage As Long, lpData As NOTIFYICONDATA) As Long
Private Declare Function SetForegroundWindow Lib "user32" (ByVal hWnd As Long) As Long
Private Declare Function CallWindowProc Lib "user32" Alias "CallWindowProcA" (ByVal lpPrevWndFunc As Long, ByVal hWnd As Long, ByVal uMsg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long
Public Declare Function PostMessage Lib "user32" Alias "PostMessageA" (ByVal hWnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lParam As Any) As Long
Public Function ShellTrayAdd() As Long
    Dim hIcon   As Long
    
    If NOTIFYICONDATA_SIZE = 0 Then SetShellVersion
    hIcon = LoadImageAsString(App.hInstance, "App", IMAGE_ICON, GetSystemMetrics(SM_CXSMICON), GetSystemMetrics(SM_CYSMICON), LR_SHARED)
    
    With NID
        .cbSize = NOTIFYICONDATA_SIZE
        .hWnd = frmNotify.hWnd
        .uID = 125&
        .uFlags = NIF_ICON Or NIF_TIP Or NIF_MESSAGE
        .uCallbackMessage = WM_MYHOOK
        .hIcon = hIcon
        .szTip = LoadResString(IDS_APP_NAME) & Chr$(0)
    End With
   
    ShellTrayAdd = Shell_NotifyIcon(NIM_ADD, NID)
End Function
Public Sub SetShellVersion()
    Select Case True
        Case IsShellVersion(6)
            NOTIFYICONDATA_SIZE = NOTIFYICONDATA_V3_SIZE '6.0+ structure size
        Case IsShellVersion(5)
            NOTIFYICONDATA_SIZE = NOTIFYICONDATA_V2_SIZE 'pre-6.0 structure size
        Case Else
            NOTIFYICONDATA_SIZE = NOTIFYICONDATA_V1_SIZE 'pre-5.0 structure size
    End Select
End Sub
Public Function IsShellVersion(ByVal version As Long) As Boolean
    'returns True if the Shell version (shell32.dll) is equal or later
    'than the value passed as 'version'
    Dim nBufferSize As Long
    Dim nUnused     As Long
    Dim lpBuffer    As Long
    Dim nVerMajor   As Integer
    Dim bBuffer()   As Byte
   
    Const sDLLFile As String = "shell32.dll"
   
    nBufferSize = GetFileVersionInfoSize(sDLLFile, nUnused)
   
    If nBufferSize > 0 Then
        ReDim bBuffer(nBufferSize - 1) As Byte
    
        Call GetFileVersionInfo(sDLLFile, 0&, nBufferSize, bBuffer(0))
    
        If VerQueryValue(bBuffer(0), "\", lpBuffer, nUnused) <> 0 Then
            CopyMemory nVerMajor, ByVal lpBuffer + 10, 2
            IsShellVersion = nVerMajor >= version
        End If  'VerQueryValue
    End If  'nBufferSize
End Function
Public Function WindowProc(ByVal hWnd As Long, ByVal uMsg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long
    'window message procedure
    '
    'If the handle returned is to our form,
    'call a form-specific message handler to
    'deal with the tray notifications.  If it
    'is a general system message, pass it on to
    'the default window procedure.
    '
    'If it is ours, we look at lParam for the
    'message generated, and react appropriately.
    On Error Resume Next
  
    Select Case hWnd
   
        'form-specific handler
        Case frmNotify.hWnd
         
            Select Case uMsg
                'WM_MYHOOK was defined as
                'the .uCallbackMessage
                'message of NOTIFYICONDATA
                Case WM_MYHOOK
                    'maintain focus on the app
                    'window to assure the menu
                    'disappears should the mouse
                    'be clicked outside the menu
                    Call SetForegroundWindow(frmNotify.hWnd)
                   
                    'lParam is the value of the message
                    'that generated the tray notification.
                    Select Case lParam
                        Case WM_RBUTTONUP:
                            frmNotify.PopupMenu frmNotify.mnuMenu, , , , frmNotify.mnuScan
                        Case WM_LBUTTONDBLCLK
                            frmNotify.mnuScan_Click
                    End Select
            
                'handle any other form messages by
                'passing to the default message proc
                Case Else
                    WindowProc = CallWindowProc(defWindowProc, hWnd, uMsg, wParam, lParam)
                    Exit Function
            End Select

        'this takes care of messages when the
        'handle specified is not that of the form
        Case Else
            WindowProc = CallWindowProc(defWindowProc, hWnd, uMsg, wParam, lParam)
    End Select
End Function
Public Sub ShellTrayRemove()
    'Remove the icon from the taskbar
    Call Shell_NotifyIcon(NIM_DELETE, NID)
End Sub
Public Sub ShellTrayModify(ByVal resIconName As String)
    If NOTIFYICONDATA_SIZE = 0 Then SetShellVersion
    With NID
        .cbSize = NOTIFYICONDATA_SIZE
        .hIcon = LoadImageAsString(App.hInstance, resIconName, IMAGE_ICON, GetSystemMetrics(SM_CXSMICON), GetSystemMetrics(SM_CYSMICON), LR_SHARED)
    End With
   
    Call Shell_NotifyIcon(NIM_MODIFY, NID)
End Sub
Public Sub SubClass(hWnd As Long)
    'assign our own window message procedure (WindowProc)
    On Error Resume Next
    defWindowProc = SetWindowLong(hWnd, GWL_WNDPROC, AddressOf WindowProc)
End Sub
Public Sub UnSubClass()
    'restore the default message handling before exiting
    If defWindowProc Then
        SetWindowLong frmNotify.hWnd, GWL_WNDPROC, defWindowProc
        defWindowProc = 0
    End If
End Sub

