Attribute VB_Name = "modMain"
'
' By Homam Babi - 2008
' humam_babi@hotmail.com
'
Option Explicit

Private Const ICC_USEREX_CLASSES = &H200
Private Const SM_CXICON = 11
Private Const SM_CYICON = 12
Private Const SM_CXSMICON = 49
Private Const SM_CYSMICON = 50
Private Const LR_SHARED = &H8000&
Private Const IMAGE_ICON = 1
Private Const WM_SETICON = &H80
Private Const ICON_SMALL = 0
Private Const ICON_BIG = 1
Private Const GW_OWNER = 4
Private Const gintMAX_SIZE% = 255       'Maximum buffer size
Private Const MOVEFILE_DELAY_UNTIL_REBOOT = &H4

Public Const IDS_UNHAV_TITLE = 121

Private Type tagInitCommonControlsEx
   lngSize As Long
   lngICC As Long
End Type

Private Declare Function InitCommonControlsEx Lib "comctl32.dll" (iccex As tagInitCommonControlsEx) As Boolean
Private Declare Function LoadImageAsString Lib "user32" Alias "LoadImageA" (ByVal hInst As Long, ByVal lpsz As String, ByVal uType As Long, ByVal cxDesired As Long, ByVal cyDesired As Long, ByVal fuLoad As Long) As Long
Private Declare Function GetWindow Lib "user32" (ByVal hwnd As Long, ByVal wCmd As Long) As Long
Private Declare Function GetSystemMetrics Lib "user32" (ByVal nIndex As Long) As Long
Private Declare Function SendMessageLong Lib "user32" Alias "SendMessageA" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long
Private Declare Function GetWindowsDirectory Lib "kernel32" Alias "GetWindowsDirectoryA" (ByVal lpBuffer As String, ByVal nSize As Long) As Long
Private Declare Function MoveFileEx Lib "kernel32" Alias "MoveFileExA" (ByVal lpExistingFileName As String, ByVal lpNewFileName As String, ByVal dwFlags As Long) As Long
Public Sub Main()
    
    'Don't allow a second instance of the app
    If App.PrevInstance = True Then GoTo EndApp

    ' we need to call InitCommonControls before we can use XP visual styles.
    ' Here I'm using InitCommonControlsEx, which is the extended version
    ' provided in v4.72 upwards (you need v6.00 or higher to get XP styles)
    On Error Resume Next
    ' this will fail if Comctl not available - unlikely now though!
    Dim iccex As tagInitCommonControlsEx
    With iccex
        .lngSize = LenB(iccex)
        .lngICC = ICC_USEREX_CLASSES
    End With
    InitCommonControlsEx iccex
    DoEvents
   
    ' now start the application
    On Error GoTo 0
    frmMain.Show

EndApp:
End Sub
Public Sub SetIcon(ByVal hwnd As Long, ByVal sIconResName As String, Optional ByVal bSetAsAppIcon As Boolean = True)
    Dim lhWndTop As Long
    Dim lhWnd As Long
    Dim cx As Long
    Dim cy As Long
    Dim hIconLarge As Long
    Dim hIconSmall As Long
      
    If (bSetAsAppIcon) Then
        ' Find VB's hidden parent window:
        lhWnd = hwnd
        lhWndTop = lhWnd
        Do While Not (lhWnd = 0)
            lhWnd = GetWindow(lhWnd, GW_OWNER)
            If Not (lhWnd = 0) Then
                lhWndTop = lhWnd
            End If
        Loop
    End If
   
    cx = GetSystemMetrics(SM_CXICON)
    cy = GetSystemMetrics(SM_CYICON)
    hIconLarge = LoadImageAsString(App.hInstance, sIconResName, IMAGE_ICON, cx, cy, LR_SHARED)
    If (bSetAsAppIcon) Then
        SendMessageLong lhWndTop, WM_SETICON, ICON_BIG, hIconLarge
    End If
    SendMessageLong hwnd, WM_SETICON, ICON_BIG, hIconLarge
   
    cx = GetSystemMetrics(SM_CXSMICON)
    cy = GetSystemMetrics(SM_CYSMICON)
    hIconSmall = LoadImageAsString(App.hInstance, sIconResName, IMAGE_ICON, cx, cy, LR_SHARED)
    If (bSetAsAppIcon) Then
        SendMessageLong lhWndTop, WM_SETICON, ICON_SMALL, hIconSmall
    End If
    SendMessageLong hwnd, WM_SETICON, ICON_SMALL, hIconSmall
End Sub
Public Function GetWindowsDir() As String
    Dim strBuf As String

    strBuf = Space$(gintMAX_SIZE)
    '
    'Get the windows directory and then trim the buffer to the exact length
    'returned and add a dir sep (backslash) if the API didn't return one
    '
    If GetWindowsDirectory(strBuf, gintMAX_SIZE) Then
        GetWindowsDir = StringFromBuffer(strBuf)
        If Right$(GetWindowsDir, 1) <> "\" Then
            GetWindowsDir = GetWindowsDir & "\"
        End If
    End If
End Function
Private Function StringFromBuffer(Buffer As String) As String
    Dim nPos As Long

    nPos = InStr(Buffer, vbNullChar)
    If nPos > 0 Then
        StringFromBuffer = Left$(Buffer, nPos - 1)
    Else
        StringFromBuffer = Buffer
    End If
End Function
Public Function FileExists(ByVal strPathName As String) As Boolean
    Dim intFileNum As Integer

    On Error Resume Next

    intFileNum = FreeFile
    Open strPathName For Input As intFileNum
        FileExists = (Err.Number = 0)
    Close intFileNum

    Err.Clear
End Function
Public Function Delete(ByVal strFile As String) As Boolean
    Err.Clear
    On Error Resume Next
    
    SetAttr strFile, vbArchive
    Kill strFile
    
    If FileExists(strFile) = True Then
        Delete = False
    Else
        Delete = True
    End If
End Function
Public Function ScheduleDeletion() As Boolean
    Dim R As Long
    Dim strFileName As String
    
    strFileName = GetWindowsDir() & "UnhAV.EXE"
    R = MoveFileEx(strFileName, vbNullString, MOVEFILE_DELAY_UNTIL_REBOOT)

    ScheduleDeletion = IIf(R = 0, False, True)
End Function

