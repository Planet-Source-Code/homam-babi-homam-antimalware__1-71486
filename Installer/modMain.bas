Attribute VB_Name = "modMain"
'
' By Homam Babi - 2008
' humam_babi@hotmail.com
'

Option Explicit

Private Const ICC_USEREX_CLASSES = &H200
Private Const SM_CXICON = 11
Private Const SM_CYICON = 12
Private Const SM_CXSMICON = 49
Private Const SM_CYSMICON = 50
Private Const LR_SHARED = &H8000&
Private Const IMAGE_ICON = 1
Private Const WM_SETICON = &H80
Private Const ICON_SMALL = 0
Private Const ICON_BIG = 1
Private Const GW_OWNER = 4
Private Const gintMAX_SIZE% = 255

Public Const IDS_APP_EXE = 100
Public Const IDS_HAV_TITLE = 120
Public Const IDS_SURE_EXIT = 142

Private Type tagInitCommonControlsEx
   lngSize As Long
   lngICC As Long
End Type

Private Type OSVERSIONINFO
    dwOSVersionInfoSize As Long
    dwMajorVersion      As Long
    dwMinorVersion      As Long
    dwBuildNumber       As Long
    dwPlatformId        As Long
    szCSDVersion        As String * 128  '  Maintenance string for PSS usage
End Type

Private Type VS_FIXEDFILEINFO
   dwSignature As Long
   dwStrucVersion As Long         'e.g. 0x00000042 = "0.42"
   dwFileVersionMS As Long        'e.g. 0x00030075 = "3.75"
   dwFileVersionLS As Long        'e.g. 0x00000031 = "0.31"
   dwProductVersionMS As Long     'e.g. 0x00030010 = "3.10"
   dwProductVersionLS As Long     'e.g. 0x00000031 = "0.31"
   dwFileFlagsMask As Long        '= 0x3F for version "0.42"
   dwFileFlags As Long            'e.g. VFF_DEBUG Or VFF_PRERELEASE
   dwFileOS As Long               'e.g. VOS_DOS_WINDOWS16
   dwFileType As Long             'e.g. VFT_DRIVER
   dwFileSubtype As Long          'e.g. VFT2_DRV_KEYBOARD
   dwFileDateMS As Long           'e.g. 0
   dwFileDateLS As Long           'e.g. 0
End Type

Public m_hProgBar   As Long         ' Progress Bar hWnd

Private Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (Destination As Any, Source As Any, ByVal Length As Long)
Private Declare Function GetFileVersionInfoSize Lib "version.dll" Alias "GetFileVersionInfoSizeA" (ByVal lptstrFilename As String, lpdwHandle As Long) As Long
Private Declare Function GetFileVersionInfo Lib "version.dll" Alias "GetFileVersionInfoA" (ByVal lptstrFilename As String, ByVal dwHandle As Long, ByVal dwLen As Long, lpData As Any) As Long
Private Declare Function VerQueryValue Lib "version.dll" Alias "VerQueryValueA" (pBlock As Any, ByVal lpSubBlock As String, lplpBuffer As Any, nVerSize As Long) As Long
Private Declare Function InitCommonControlsEx Lib "comctl32.dll" (iccex As tagInitCommonControlsEx) As Boolean
Private Declare Function LoadImageAsString Lib "user32" Alias "LoadImageA" (ByVal hInst As Long, ByVal lpsz As String, ByVal uType As Long, ByVal cxDesired As Long, ByVal cyDesired As Long, ByVal fuLoad As Long) As Long
Private Declare Function GetWindow Lib "user32" (ByVal hwnd As Long, ByVal wCmd As Long) As Long
Private Declare Function GetSystemMetrics Lib "user32" (ByVal nIndex As Long) As Long
Private Declare Function SendMessageLong Lib "user32" Alias "SendMessageA" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long
Private Declare Function GetVersionEx Lib "kernel32" Alias "GetVersionExA" (lpVersionInformation As OSVERSIONINFO) As Long
Private Declare Function GetWindowsDirectory Lib "kernel32" Alias "GetWindowsDirectoryA" (ByVal lpBuffer As String, ByVal nSize As Long) As Long
Public Sub Main()
    'Don't allow a second instance of the app
    If App.PrevInstance = True Then GoTo EndApp

    ' we need to call InitCommonControls before we can use XP visual styles.
    ' Here I'm using InitCommonControlsEx, which is the extended version
    ' provided in v4.72 upwards (you need v6.00 or higher to get XP styles)
    On Error Resume Next
    ' this will fail if Comctl not available - unlikely now though!
    Dim iccex As tagInitCommonControlsEx
    With iccex
        .lngSize = LenB(iccex)
        .lngICC = ICC_USEREX_CLASSES
    End With
    InitCommonControlsEx iccex
   
    ' now start the application
    On Error GoTo 0
    frmMain.Show
    
EndApp:
End Sub
Public Sub SetIcon(ByVal hwnd As Long, ByVal sIconResName As String, Optional ByVal bSetAsAppIcon As Boolean = True)
    Dim lhWndTop As Long
    Dim lhWnd As Long
    Dim cx As Long
    Dim cy As Long
    Dim hIconLarge As Long
    Dim hIconSmall As Long
      
    If (bSetAsAppIcon) Then
        ' Find VB's hidden parent window:
        lhWnd = hwnd
        lhWndTop = lhWnd
        Do While Not (lhWnd = 0)
            lhWnd = GetWindow(lhWnd, GW_OWNER)
            If Not (lhWnd = 0) Then
                lhWndTop = lhWnd
            End If
        Loop
    End If
   
    cx = GetSystemMetrics(SM_CXICON)
    cy = GetSystemMetrics(SM_CYICON)
    hIconLarge = LoadImageAsString(App.hInstance, sIconResName, IMAGE_ICON, cx, cy, LR_SHARED)
    If (bSetAsAppIcon) Then
        SendMessageLong lhWndTop, WM_SETICON, ICON_BIG, hIconLarge
    End If
    SendMessageLong hwnd, WM_SETICON, ICON_BIG, hIconLarge
   
    cx = GetSystemMetrics(SM_CXSMICON)
    cy = GetSystemMetrics(SM_CYSMICON)
    hIconSmall = LoadImageAsString(App.hInstance, sIconResName, IMAGE_ICON, cx, cy, LR_SHARED)
    If (bSetAsAppIcon) Then
        SendMessageLong lhWndTop, WM_SETICON, ICON_SMALL, hIconSmall
    End If
    SendMessageLong hwnd, WM_SETICON, ICON_SMALL, hIconSmall
End Sub
Public Function CheckOSVer() As Boolean
    Dim OsInfo As OSVERSIONINFO
    Dim Ret As Long
    
    OsInfo.dwOSVersionInfoSize = Len(OsInfo)
    
    Ret = GetVersionEx(OsInfo)
    
    If (OsInfo.dwMajorVersion <> 5) Or (OsInfo.dwMinorVersion <> 1) Then
        Load frmOSVer
        frmOSVer.vMajor = OsInfo.dwMajorVersion
        frmOSVer.vMinor = OsInfo.dwMinorVersion
        frmOSVer.Show
        
        CheckOSVer = False
    Else
        CheckOSVer = True
    End If

End Function
Public Function GetWindowsDir() As String
    Dim strBuf As String

    strBuf = Space$(gintMAX_SIZE)
    
    'Get the windows directory and then trim the buffer to the exact length
    'returned and add a dir sep (backslash) if the API didn't return one
    If GetWindowsDirectory(strBuf, gintMAX_SIZE) Then
        GetWindowsDir = StringFromBuffer(strBuf)
        If Right$(GetWindowsDir, 1) <> "\" Then
            GetWindowsDir = GetWindowsDir & "\"
        End If
    End If
End Function
Private Function StringFromBuffer(Buffer As String) As String
    Dim nPos As Long

    nPos = InStr(Buffer, vbNullChar)
    If nPos > 0 Then
        StringFromBuffer = Left$(Buffer, nPos - 1)
    Else
        StringFromBuffer = Buffer
    End If
End Function
Public Function FileExists(ByVal strPathName As String) As Boolean
    Dim intFileNum As Integer

    On Error Resume Next

    intFileNum = FreeFile
    Open strPathName For Input As intFileNum
        FileExists = (Err.Number = 0)
    Close intFileNum

    Err.Clear
End Function
Public Function Delete(ByVal strFile As String) As Boolean
    Err.Clear
    On Error Resume Next
    
    SetAttr strFile, vbArchive
    Kill strFile
    
    If FileExists(strFile) = True Then
        Delete = False
    Else
        Delete = True
    End If
End Function
Public Sub Check4Scheduling()
    'Check to see if exists
    Dim strValue As String
    
    fReadValue "HKLM", "SYSTEM\CurrentControlSet\Control\Session Manager", "PendingFileRenameOperations", "S", vbNullString, strValue
    
    If InStr(strValue, LoadResString(IDS_APP_EXE)) Then
        frmRestart.Show vbModal, frmMain
    End If
End Sub
Public Function GethAVVersion(ByVal sFile As String) As String
    Dim FI As VS_FIXEDFILEINFO
    Dim sBuffer() As Byte
    Dim nBufferSize As Long
    Dim lpBuffer As Long
    Dim nVerSize As Long
    Dim nUnused As Long
    Dim tmpVer As String
   
    'An empty variable must be passed as the second
    'parameter, which the call returns 0 in.
    nBufferSize = GetFileVersionInfoSize(sFile, nUnused)
   
    If nBufferSize > 0 Then
        'create a buffer to receive file-version
        '(FI) information.
        ReDim sBuffer(0 To nBufferSize)
        Call GetFileVersionInfo(sFile, 0&, nBufferSize, sBuffer(0))
      
        'VerQueryValue function returns selected version info
        'from the specified version-information resource. Grab
        'the file info and copy it into the  VS_FIXEDFILEINFO structure.
        Call VerQueryValue(sBuffer(0), "\", lpBuffer, nVerSize)
        Call CopyMemory(FI, ByVal lpBuffer, Len(FI))
     
        'extract the file version from the FI structure
        tmpVer = Format$(HiWord(FI.dwFileVersionMS)) & "." & _
                Format$(LoWord(FI.dwFileVersionMS), "00") & "."
         
        If FI.dwFileVersionLS > 0 Then
            tmpVer = tmpVer & Format$(HiWord(FI.dwFileVersionLS), "00") & "." & _
                            Format$(LoWord(FI.dwFileVersionLS), "00")
        Else
            tmpVer = tmpVer & Format$(FI.dwFileVersionLS, "0000")
        End If
      
    End If
   
    GethAVVersion = tmpVer
End Function
Private Function HiWord(dw As Long) As Long
    If dw And &H80000000 Then
        HiWord = (dw \ 65536) - 1
    Else
        HiWord = dw \ 65536
    End If
End Function
Private Function LoWord(dw As Long) As Long
    If dw And &H8000& Then
        LoWord = &H8000& Or (dw And &H7FFF&)
    Else
        LoWord = dw And &HFFFF&
    End If
End Function



